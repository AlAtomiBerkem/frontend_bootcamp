// Вам нужно написать функция для решения Судоку. Функция принимает один аргумент - строку, в ней на месте пропущенных цифр стоят -.
// Функция должна вернуть строку, в которой все значения будут заполнены.

// Давайте сыграем в настоящую головоломку Судоку, обращая внимание на то, как мы приближаемся к решению поставленной задачи.
// - Какие стратегии мы принимаем и почему?
// - Как мы выбираем, с чего начать?
// - Как мы узнаем, когда действительно следует поставить число в клетку?
// - Что мы делаем, когда мы окончательно не знаем, как заполнить остальные клетки?
// Размышляя о нашей человеческой стратегии, важно понимать, что иногда стратегии, которые работают для людей, будет трудно реализовать на компьютере.
// Однако верно и обратное: стратегии компьютера могут быть не всегда удобны для людей, потому что нам придется писать слишком много текста, использовать слишком много листов бумаги или помнить много информации, которую в состоянии запомнить компьютер, но не человек.
// Обязательно напишите метод `prettyBoard`, который берет доску, записанную в строчку и возвращает отформатированный вариант, более привычный для нашего визуального восприятия. Например:

// ```
// 1 - 5 8 - 2 - - -
// - 9 - - 7 6 4 - 5
// 2 - - 4 - - 8 1 9
// - 1 9 - - 7 3 - 6
// 7 6 2 - 8 3 - 9 -
// - - - - 6 1 - 5 -
// - - 7 6 - - - 3 -
// 4 3 - - 2 - 5 - 1
// 6 - - 3 - 8 9 - -
// ```;

// Ниже представленны тестовые данные для вашей функции, они имеют 3 уровня сложности.
// * Пять головоломок могут быть решены с помощью базовой логики.
// * Пять требуют немного более продвинутой логики.
// * Пять требуют от вашего решателя умения угадывать и перерешивать, если зашёл в тупик.

let q = ("--5-3--819-285--6-6----4-5---74-283-34976---5--83--49-15--87--2-9----6---26-495-3");
let c = ("29-5----77-----4----4738-129-2--3-648---5--7-5---672--3-9--4--5----8-7---87--51-9");
let z = ("-8--2-----4-5--32--2-3-9-466---9---4---64-5-1134-5-7--36---4--24-723-6-----7--45-");
let d = ("6-873----2-----46-----6482--8---57-19--618--4-31----8-86-2---39-5----1--1--4562--");
let f = ("---6891--8------2915------84-3----5-2----5----9-24-8-1-847--91-5------6--6-41----");
let i = ("-3-5--8-45-42---1---8--9---79-8-61-3-----54---5------78-----7-2---7-46--61-3--5--");
let g = ("-96-4---11---6---45-481-39---795--43-3--8----4-5-23-18-1-63--59-59-7-83---359---7");
let h = ("----754----------8-8-19----3----1-6--------34----6817-2-4---6-39------2-53-2-----");
let k = ("3---------5-7-3--8----28-7-7------43-----------39-41-54--3--8--1---4----968---2--");
let l = ("3-26-9--55--73----------9-----94----------1-9----57-6---85----6--------3-19-82-4-");
let v = ("-2-5----48-5--------48-9-2------5-73-9-----6-25-9------3-6-18--------4-71----4-9-");
let b = ("--7--8------2---6-65--79----7----3-5-83---67-2-1----8----71--38-2---5------4--2--");
let m = ("----------2-65-------18--4--9----6-4-3---57-------------------73------9----------");
let o = ("---------------------------------------------------------------------------------");

// решать судоку будем с помошью алгоритма Depth-first search (DFS)


let SolveSudoku = function(board) {
    const size = 9;
    const boxSize = 3;

    const findEmpty = (board) => {
        for (let r = 0; r < size; r++) {
            for (let c = 0; c < size; c++) {
                if (board[r][c] === '-') {
                    return [r, c];
                }
            }
        }
        return null;
    }

    const validate = (num, pos, board) => {
        const [r, c] = pos;

        for (let i = 0; i < size; i++) {
            if (board[r][i] === num && i !== c) {
                return false;
            }
        }
        for (let i = 0; i < size; i++) {
            if (board[i][c] === num && i !== r) {
                return false;
            }
        }

        const boxRow = Math.floor(r / boxSize) * boxSize;
        const boxCol = Math.floor(c / boxSize) * boxSize;

        for (let i = boxRow; i < boxRow + boxSize; i++) {
            for (let j = boxCol; j < boxCol + boxSize; j++) {
                if (board[i][j] === num && (i !== r || j !== c)) {
                    return false;
                }
            }
        }
        return true;
    }

    const solve = () => {
        const currPos = findEmpty(board);

        if (currPos === null) {
            return true;
        }

        for (let i = 1; i <= size; i++) {
            const currNum = i.toString();
            const isValid = validate(currNum, currPos, board);

            if (isValid) {
                const [x, y] = currPos;
                board[x][y] = currNum;

                if (solve()) {
                    return true;
                }

                board[x][y] = '-';
            }
        }
        return false;
    }

    solve();
    return board;
};


function stringToBoard(sudoky_string) {
    let board = [];
    for (let i = 0; i < sudoky_string.length; i += 9) {
        board.push(sudoky_string.slice(i, i + 9).split(''));
    }
    return board;
}

function boardToString(board) {
    return board.map(row => row.join('')).join('');
}

function prettyBoard(sudoky_dask) { // выводит доску решенного или нерешенного судоку
    for (let i = 0; i < sudoky_dask.length; i += 9) {
        let modyfy = sudoky_dask.substring(i, i + 9);
        console.log(modyfy.split('').join(' '));
    }
}

let a = ("1-58-2----9--764-52--4--819-19--73-6762-83-9-----61-5---76---3-43--2-5-16--3-89--");
let board = stringToBoard(m); // вставляем доску которую хотим решить


prettyBoard(m);

let solvedBoard = SolveSudoku(board);
let result = boardToString(solvedBoard);
console.log('\n')
prettyBoard(result);